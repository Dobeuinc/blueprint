#!/usr/bin/env node

'use strict';

var program  = require ('commander')
  , path     = require ('path')
  , async    = require ('async')
  , fse      = require ('fs-extra')
  , lib      = require ('../lib')
  , execFile = require('child_process').execFile
  ;

var TemplateDir = lib.TemplateDir
  ;

program
  .arguments('<name>')
  .option ('-o, --output-path [path]', 'output path [./]', './')
  .option ('--version [version]', 'version number [0.0.1]', '0.0.1')
  .option ('--license [license]', 'distribution license [Apache-2.0]', 'Apache-2.0')
  .option ('--debug', 'enable debug messages')
  .action (generateApplication);

program.parse (process.argv);

function generateApplication (name) {
  if (program.debug)
    winston.level = 'debug';

  var templatePath = path.resolve (__dirname, '../templates/blueprint-new');
  var dstPath = path.resolve (program.outputPath, name);

  async.waterfall ([
    function (callback) {
      fse.ensureDir (dstPath, callback);
    },

    function (made, callback) {
      console.log ('Generating Blueprint.js application; please be patient...');

      // Define the view used to render the templates, then render the templates with
      // this view of the system.
      var view = {
        project : {
          name: name,
          version: program.version,
          license: program.license
        }
      };

      var templates = new TemplateDir (templatePath);
      templates.render (dstPath, view, callback);
    },

    function (callback) {
      const commands = [
        [
          'install',
          '--save',
          '@onehilltech/blueprint',
          '@onehilltech/blueprint-mongodb'
        ],
        [
          'install',
          '--save-dev',
          'chai',
          'mocha',
          'superagent',
          'supertest'
        ],
        [
          'bin'
        ]
      ];

      async.eachSeries (commands, function (command, callback) {
        execFile ('npm', command, {cwd: dstPath}, callback);
      }, callback);
    }
  ], onComplete);
}

function onComplete (err) {
  if (err)
    return console.log (err);

  console.log ('Blueprint.js application project is ready!')
}

