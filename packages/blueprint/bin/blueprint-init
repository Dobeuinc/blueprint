#!/usr/bin/env node

var program  = require ('commander')
  , mustache = require ('mustache')
  , fs       = require ('fs')
  , path     = require ('path')
  , winston  = require ('winston')
  , exec     = require ('child_process').exec
  , async    = require ('async')
  ;

const TEMPLATE_SUFFIX = '.tmpl';

program
  .option ('-n, --name <name>', '[name] of the web application')
  .parse (process.argv);

winston.log ('info', 'target output: %s', program.path);

var templatePath = path.resolve (__dirname, '../templates/blueprint-init');
var packageInfo = require (path.resolve (__dirname, '../package.json'));

var view = {
  blueprint : packageInfo,
  project : {
    name   : program.name,
    author : program.author,
    description : program.description,
    version : program.version
  }
};

function generate (dir, outdir, done) {
  fs.readdir (dir, function (err, files) {
    if (err)
      return done (err);

    // Iterate over each of the files in the directory. If we have a file,
    // then we generate the template. If we have a directory, then we create
    // the corresponding directory in the output, and continue walking.
    var pending = files.length;

    if (pending === 0)
      return done ();

    files.forEach (function (file) {
      var abspath = path.resolve (dir, file);
      var targetPath = path.resolve (outdir, file);

      fs.stat (abspath, function(err, stat) {
        if (stat && stat.isDirectory ()) {
          // Make the new directory in the target output, and then walk the
          // contents of the directory.
          var newDir = path.resolve(outdir, file);

          function created(err) {
            if (err)
              return done (err);

            // Perform the next iteration on the next tick.
            generate (abspath, newDir, function (err) {
              if (err)
                return done (err);

              // Decrement the pending count.
              if (-- pending === 0)
                return done ();
            });
          }

          fs.stat(targetPath, function (err, stat) {
            if (stat && stat.isDirectory ())
              return created ();

            fs.mkdir(targetPath, created);
          });
        }
        else if (file.indexOf (TEMPLATE_SUFFIX) === (file.length - TEMPLATE_SUFFIX.length)) {
          // Open the file for reading, and process the template in the file.
          fs.readFile (abspath, function (err, data) {
            if (err)
              return done (err);

            var output = mustache.render (data.toString (), view);
            var targetFile = path.resolve (outdir, file.substring (0, file.length - TEMPLATE_SUFFIX.length));

            fs.writeFile (targetFile, output, function (err) {
              if (err)
                return done (err);

              if (-- pending === 0)
                return done ();
            });
          });
        }
        else if (-- pending === 0) {
          return done ();
        }
      });
    });
  });
};

generate (templatePath, program.path, function (err) {
  if (err)
    throw err;

  var options = {
    cwd : program.path
  };

  // Run the final tasks to complete the initialization.
  async.series ([
    function (callback) {
      winston.log ('info', 'installing application dependencies...');
      exec ('npm install', options, function (err, stdout, stderr) {
        if (err) throw err;
        return callback ();
      });
    },
    function (callback) {
      winston.log ('info', 'installing application binaries locally...');
      exec ('npm bin', options, function (err, stdout, stderr) {
        if (err) throw err;
        return callback ();
      });
    }
  ], function (err) {
    if (err) throw err;
    winston.log ('info', 'Blueprint.js web application initialization complete!');
  });
});
